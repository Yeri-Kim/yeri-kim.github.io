{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/redux/","webpackCompilationHash":"947545fcb38bf3300c81","result":{"data":{"markdownRemark":{"id":"eb14626b-8f10-5ca6-a5dd-e8401458ff2b","html":"<p>React를 이제 막 시작한 사람들은 Redux의 두려움이 크다. 하지만 컨셉은 그리 어렵지 않다.\nRedux는 application 전체의 상태(state)관리하기 위한 library이다.</p>\n<p>React는 부모 컴포넌트에서 자식 컴포넌트에 props로 data나 state 변화를 넘겨주기 쉽다. 자식이 부모에게 넘어주는 것도 그리 어렵지 않다.\n그런데 사돈의 팔촌이나, 저~~ 멀리 있는 컴포넌트에서 서로의 state 변화를 감지하려면 상당히 복잡해지기 시작한다.</p>\n<p>이를 해결하기위해 어떻게 하면 좋을까? window 글로벌 객체에서 관리할까? 브라우저 storage에서?\n이렇게 하면 state가 변경되더라도, 알고 싶은 컴포넌트에서 변경된 것을 감지하지 못한다.\n아니면 최상단 컴포넌트에서 state를 관리하게 하고 자식의 자식의 자식에 넘겨주면 될까? 만약 depth가 너무 깊을 경우 전달하고-전달하고-전달하고.. 너무 복잡해진다.</p>\n<p>이를 해결할 수 있는 것이 <a href=\"https://facebook.github.io/flux/docs/in-depth-overview\">Flux</a> pattern이다.\nFlux는 Facebook에서 개발한 data flow를 위한 architecture이다. pattern이라고 불러도 좋다. Redux, mobX같은 것은 Flux 아키텍쳐를 구현한 라이브러리라고 생각하면 된다.\n혹은 react의 <a href=\"https://reactjs.org/docs/context.html\">context api</a>로도 해결 가능하며, 요즘에(19년도) redux대신 context api로 대체하는 프로젝트도 종종 보인다.</p>\n<p>Flux data flow를 살펴보자.\n<img src=\"/media/190715.png\"></p>\n<p>Application의 전체 state는 store라고 불리는 곳에서 관리된다.\nstore는 redux의 상태값(state)를 갖는 객체이다.\naction은 state 변화를 일으킬 수 있는 하나의 현상이다.\naction을 dispatch(발행)해서 store에 저장하고, state가 변경되면 view에서 감지하게 된다.</p>\n<p>action은 사용자가 일으키는 이벤트라고 생각해도 되는데, 위의 그림과 같이 view단에서 action이 일어날 수도 있다.\nview에서 action이 일어나면 -> 다시 dispatcher에 의해 store에 저장되고 -> state가 변경되면 -> 필요한 view에서 감지를 알아차린다.</p>\n<p>다시 한 번 용어 정리를 해보려고 한다. 기술적으로 작성한 것도 있는데, 일단은 읽고 뒤에서 마저 설명하도록 하겠다. Redux에서도 사용하는 용어이다.</p>\n<ul>\n<li>\n<p>action: 상태 변화를 일으킬 수 있는 현상. 예를 들어 사용자의 입력, 웹 요청 완료 등이다. data type은 plain object이다. type 프로퍼티를 꼭 갖고 있다. type이란 어떤 행동을 설명하는 string이다.\n아래와 같이 구조이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'SHOW_MODAL'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>store: application의 전체 state를 가지고 있는 객체. app에는 단 하나의 store를 갖고 있는 것이 좋다고 한다.</li>\n<li>view: 리액트에서는 component라고 생각하면 된다.</li>\n</ul>\n<h3 id=\"리덕스의-특징\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"리덕스의 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스의 특징</h3>\n<p>리덕스의 3가지 특징이 있다. 많은 책이나 블로그에서 설명하는 주요 컨셉인데 <a href=\"https://redux.js.org/introduction/three-principles\">공식 docs</a>에서 읽고 넘어가자.</p>\n<p>이 중에서 알고 넘어갈 것이 있다.</p>\n<ul>\n<li>\n<p>State는 읽기 전용이다. 컴포넌트에서는 state를 참조만 할 수 있고, (setState처럼) 변경할 수는 없다.\nstate를 변경하고 싶다면, Action을 dispatch(발행)해서 app의 state를 변경해야만 한다.\n이렇게 해야 데이터의 흐름이 한 방향으로만 흐르게 된다.</p>\n</li>\n<li>\n<p>reducer는 pure function(순수 함수)으로 이뤄져야 한다.\n순수 함수란 같은 입력 값을 넣으면 같은 출력 값을 내는 함수를 의미한다.\nreducer는 이전의 state와 action을 입력 받고, 이로 인해 변화한(next) state를 return한다.\n즉, reducer는 action에 의해 state를 변경시키는 함수라고 생각하면 된다.</p>\n</li>\n</ul>\n<h3 id=\"리덕스-설치\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"리덕스 설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 설치</h3>\n<p>Create React App 기준으로 설명!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save redux react-redux</code></pre></div>\n<p><a href=\"https://react-redux.js.org/introduction/quick-start\">react-redux</a>은 redux를 react에서 사용하기 좋도록 만들어진 것이다.</p>\n<p>원래 state의 변화를 감지하거나, action을 발행하려면 store.dispatch(), store.subscribe() 등의 메서드를 매번 사용해야 하는데,\nreact-redux로 component에서 store를 쉽게 읽고, action을 쉽게 dispatch할 수 있도록 해준다.</p>\n<p>react app에서 store를 사용하려면 <code class=\"language-text\">&lt;Provider&gt;</code>를 사용해야 한다. 시작점, 즉 가장 최상위 컴포넌트를 Provider로 래핑하고 속성에 store를 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token comment\">//리듀서 필요</span>\n<span class=\"token comment\">//const store = createStore();</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  rootElement\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"리덕스의-구성-요소\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"리덕스의 구성 요소 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스의 구성 요소</h3>\n<p>위의 코드에서 store를 생성하려면 reducer가 필요하다. reducer가 무엇인지 보고 마저 코드를 완성하자.</p>\n<h4 id=\"reducer\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h4>\n<p>리듀서는 store가 가지고 있는 state를 변화시키기 위한 함수이다.\n리듀서는 이전의 state와 action을 인자로 받고, 이 action의 내용(type)에 따라 state를 변화시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(state, action) =&gt; nextState</code></pre></div>\n<p>redux의 createStore함수에 reducer를 인자로 주어야 한다. 일단 reducer를 정의해보자. 아래는 modal이라는 reducer를 정의한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//src/ModalReducer.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SHOW_MODAL'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        showModal<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'CLOSE_MODAL'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        showModal<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>각 action type 별로 새로운(next) state를 생성하여 return하면 된다.</p>\n<p>위의 코드에서 <code class=\"language-text\">SHOW_MODAL</code>이라는 action type과, <code class=\"language-text\">CLOSE_MODAL</code>이라는 action type에 따라 return하는 state가 다르다.\n<code class=\"language-text\">SHOW_MODAL</code> 이라는 action type이 전달되면 showModal 이라는 상태를 true로 변경하고\n<code class=\"language-text\">CLOSE_MODAL</code> 이라는 action type이 전달되면 showModal 이라는 상태를 false로 변경한다.</p>\n<p>위에서 state가 없을 때 null로 세팅했는데 초기 상태를 주기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INITIAL_STATE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  showModal<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">modal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token constant\">INITIAL_STATE</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//생략</span></code></pre></div>\n<h4 id=\"store\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h4>\n<p>리덕스는 createStore라는 함수로 store를 생성한다. store는 app에 오직 하나만 있다.\n이 유일한 store를 사용해 app 전체의 상태를 관리한다.</p>\n<p>리덕스의 스토어를 생성하는 경우에는 리듀서가 필요하다. 위에서 리듀서를 생성했으니 index.js를 수정하자. 첫 번째 매개변수에 리듀서를 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> modalReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./ModalReducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>modalReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"action\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h4>\n<p>Action에 대해 다시 한 번 설명하자면 사용자의 입력이나 UI 조작, 웹 요청 완료같이 어떠한 상태 변화를 일으킬 수 있는 현상이다.\n즉, 어떤 조작인지 정보를 갖고 있는 자바스크립트 객체이다. 조작 정보는 type 프로퍼티에 지정한다.</p>\n<p>action 객체는 아래와 같이 생겼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'SHOW_MODAL'</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'모달 제목'</span><span class=\"token punctuation\">,</span>\n            dim<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> 다음과 같은 특징을 가진다.</p>\n<ul>\n<li>action은 plain object이다.</li>\n<li>action은 반드시 type 프로퍼티를 가져야만 한다. 일반적으로 type은 어떤 행동을 설명하는 문자열이다.</li>\n<li>action은 payload를 가질 수도 있다. payload는 특정 액션에 부가적인 데이터를 전달하고 싶을 때 사용한다. 물론 payload가 아닌 다른 다른 프로퍼티명을 사용해도 된다.</li>\n</ul>\n<p>action의 type은 reducer에서도 사용해야되기 때문에 상수로 관리하자.\n예제코드에서는 적용하지 않았다.</p>\n<p>보통 action은 객체 리터럴로 바로 정의하는 것이 아니라 Action Creator(액션 생성자) 함수로 action을 생성한다.\n동일한 구조의 action 객체를 만들기 위함이다. Action Creator로 만들지 않으면 action 객체 구조가 일정하지 않을 수도 있기 때문이다.\n즉, action 객체를 return하는 함수를 호출해서 action을 만든다.</p>\n<p>위의 action을 Action Creator로 만든다면 아래와 같다. showModal이라는 이름으로 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showModal</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">options</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'SHOW_MODAL'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> options <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>modal을 보여줄 때 사용할 options을 매개변수로 받고, action 객체를 리턴하는 간단한 함수이다.\naction의 type은 ‘SHOW_MODAL’이며, modal을 보여줄 때 필요한 options라는 데이터를 payload에 추가하였다.</p>\n<p>다음과 같이 Action Creator를 사용해 action을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'로그인'</span><span class=\"token punctuation\">,</span>\n  dim<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"action의-발행과-state-변화-감지\"><a href=\"#action%EC%9D%98-%EB%B0%9C%ED%96%89%EA%B3%BC-state-%EB%B3%80%ED%99%94-%EA%B0%90%EC%A7%80\" aria-label=\"action의 발행과 state 변화 감지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action의 발행과 state 변화 감지</h3>\n<p>원래 action을 dispatch(발행)하고 싶다면 store.dispatch() 메서드를 사용한다. react-redux에서는 사용이 조금 다르므로 알아만 두고 가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'로그인'</span><span class=\"token punctuation\">,</span>\n  dim<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 action을 dispatch(발행)하면 ‘SHOW_MODAL’이라는 type을 가진 액션이 발행되고 -> 리듀서에 의해 상태가 변화된다.</p>\n<p>react에서는 특정 컴포넌트에서 store의 상태를 얻을 때는 connect함수를 사용한다. connect는 store를 특정 컴포넌트에 전달하는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> showModal<span class=\"token punctuation\">,</span> closeModal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../ModalAction'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Main</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>showModal<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">열기</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>closeModal<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">닫기</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  show<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>showModal\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">showModal</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">closeModal</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">closeModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>connect의 첫 번째 매변수는 mapStateToPropse이다. 영어그대로, store의 state를 해당 컴포넌트의 props로 전달하겠다는 의미이다.</p>\n<p>두번째 매개변수는 mapDispatchToPros이다.\n컴포넌트에서 액션을 발행(dispatch)하고 싶을 때, actionCreator로 생성된 action을 dispatch할 수 있는 함수를 컴포넌트의 props로 넘길 수 있도록 한다.</p>\n<h3 id=\"combinereducers\"><a href=\"#combinereducers\" aria-label=\"combinereducers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>combineReducers</h3>\n<p>combineReducers는 리덕스에서 제공하는 메서드로, 각 리듀서를 하나로 모아주는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> authReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./AuthReducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ModalReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./ModalReducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  auth<span class=\"token punctuation\">:</span> authReducer<span class=\"token punctuation\">,</span>\n  modal<span class=\"token punctuation\">:</span> ModalReducer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"redux-thunk\"><a href=\"#redux-thunk\" aria-label=\"redux thunk permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux-thunk</h3>\n<p>여기서 부터 wip..\nredux-thunk는 redux의 미들웨어이다. 미들웨어란, 어떤 기능을 사용하기 좋게 확장한 것인데\nredux-thunk도 redux의 미들웨어중 하나이다.</p>\n<p>redux-thunk는 비동기 처리를 해주는 미들웨어이다.\n원래 action내에서 fetch가 불가능하기 때문에 비동기를 처리하려면 해당 미들웨어를 설치해야 한다.</p>\n<p>action의 rule에 무조건 object를 return해야한다는 것에서 확장할 수 있다.\naction은 action object나 function을 return할 수 있다.</p>","fields":{"slug":"/posts/redux/","tagSlugs":["/tag/react/","/tag/redux/"]},"frontmatter":{"date":"2019-07-14T13:42:32.169Z","description":null,"tags":["react","redux"],"title":"Redux"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/redux/"}}}