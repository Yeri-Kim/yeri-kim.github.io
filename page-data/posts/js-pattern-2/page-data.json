{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js-pattern-2/","webpackCompilationHash":"cbda2db0af21d6af8a3a","result":{"data":{"markdownRemark":{"id":"5f84ab3e-ed6d-55ce-9aee-7f7dac6ebd52","html":"<p>유지보수 가능한 코드란 다음과 같은 특징을 지닌다.</p>\n<ul>\n<li>읽기 쉽다.</li>\n<li>일관적이다.</li>\n<li>예측 가능하다.</li>\n<li>한 사람이 작성한 것처럼 보인다.</li>\n<li>문서화되어 있다.</li>\n</ul>\n<h3 id=\"단일-선언-패턴\"><a href=\"#%EB%8B%A8%EC%9D%BC-%EC%84%A0%EC%96%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"단일 선언 패턴 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일 선언 패턴</h3>\n<p>함수 상단에서 let, const 선언을 한 번만 쓰는 패턴은 다음과 같은 이점들이 있다.</p>\n<ul>\n<li>함수에서 필요로 하는 모든 지역 변수를 한군데서 찾을 수 있다.</li>\n<li>변수를 선언하기 전에 사용할 때 발생하는 로직상의 오류를 막아준다.</li>\n</ul>\n<p>단점은 디버깅할 때 선언부의 변수에 접근하기 어렵다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      b <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      i<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//함수 본문</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"for-루프\"><a href=\"#for-%EB%A3%A8%ED%94%84\" aria-label=\"for 루프 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for 루프</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//최적화되지 않은 푸르</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//arr[i] ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 패턴의 문제점은 루프순회마다 배열의 length에 접근한다는 점이다.\narr가 평범한 배열이면 괜찮을 수도 있지만, DOM접근이 필요한 배열이라면 상당한 비용이 발생한다.</p>\n<p>아래와 같이 배열의 length를 캐시하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//arr[i] ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"for-in-루프\"><a href=\"#for-in-%EB%A3%A8%ED%94%84\" aria-label=\"for in 루프 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-in 루프</h3>\n<p>for-in 루프는 객체를 순회할 때 사용하는데, for-in으로 루프를 도는 것을 열거(enumeration)라고도 한다.\nfor-in에서는 프로퍼티를 열거하는 순서가 정해져있지 않으므로 유의하자.</p>\n<p>객체의 프로퍼티를 순회할 때는 프로토타입 체인을 따라 상속되는 프로퍼티들을 걸러내기 위해 hasOwnProperty()메서드를 사용해야한다.</p>\n<p>오로지 자신의 property만 나올 수 있도록, 즉, prototype의 property를 걸러내도록 꼭 사용해야한다는 의미이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> man <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  hands<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  haed<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> man<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//내용</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"parseint를-통한-숫자-변환\"><a href=\"#parseint%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%AB%EC%9E%90-%EB%B3%80%ED%99%98\" aria-label=\"parseint를 통한 숫자 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parseInt()를 통한 숫자 변환</h3>\n<p>parseInt()를 사용해서 문자열 -> 숫자로 변환하는 경우, 두 번째 인자에 꼭 기수를 넘겨줄 것!\n두 번째 인자인 기수(radix, 진수)의 default 값이 10이 아니므로, 명확하게 꼭 써줘야 한다.</p>\n<h3 id=\"그-외\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-label=\"그 외 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외..</h3>\n<ul>\n<li>전역 변수 최소화</li>\n<li>암묵적 type casting 피하기 (== 말고 === 사용)</li>\n<li>코드 작성 규칙 준수(공백, 들여쓰기, 중괄호, 세미콜론, 명명 규칙)</li>\n</ul>","fields":{"slug":"/posts/js-pattern-2/","tagSlugs":["/tag/design-pattern/"]},"frontmatter":{"date":"2019-07-12T14:43:32.169Z","description":"O'REILLY의 자바스크립트 코딩 기법과 핵심 패턴 챕터 2장 정리","tags":["design-pattern"],"title":"[JavaScript Patterns] 2장 기초"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/js-pattern-2/"}}}