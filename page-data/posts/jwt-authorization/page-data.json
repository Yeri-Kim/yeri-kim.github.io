{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/jwt-authorization/","webpackCompilationHash":"bc623d85ed731c123dca","result":{"data":{"markdownRemark":{"id":"6f40615b-b4dc-5e4b-a8da-1db4de7cefc9","html":"<p>이번 시간에는 access token을 local storage에 저장하고, api 호출 시 request header에 담아 보내는 법을 배우도록 하겠습니다.</p>\n<p>지금 로그인 api에서는 로그인이 성공하면 jwt로 만든 access token을 받고 있습니다.\n프론트앤드에서는 이 access token을 잘 갖고 있다가, 사용자 정보가 필요한 api를 호출할 때\n해당 access token을 보내주어야 합니다.</p>\n<p>이미 jwt에 대한 수업을 들었기에 위의 문장이 무슨 말인지 다 이해하셨길 바라지만.. 한 번 더 프로세스를 보겠습니다.</p>\n<p>jwt는 <code class=\"language-text\">Json Web Token</code>의 약자로 access token을 만드는 방법 중 하나입니다.\n백앤드에서 jwt를 생성할 때, 해당 user가 누구인지 식별할만한 정보를 담을 수 있습니다.</p>\n<p>예를 들어 백앤드에서 받은 아래의 access token을 decode해보니 <code class=\"language-text\">user_id: 5</code>라는 정보를 담고 있었다는 것을 알 수 있습니다.\n(<a href=\"https://jwt.io/\">https://jwt.io/</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1fQ.Dy3PPHIOFFe3ScGTb8x3hewItnpOcgC9YDdW7v27XHg</code></pre></div>\n<img src=\"/media/190507-jwt.png\" width=\"500\" />\n<p>페이지를 이동할 때 마다, 아니면 브라우저를 끄고 켤때마다 매번 로그인을 할 수 없기 때문에 이렇게 access token을 주고 받아서 사용자 인증을 진행합니다.\n로그인을 하면 access token을 받아서, 프론트앤드는 어딘가에 보관하고 있다가 사용자 정보가 필요한 api에 해당 access token을 백앤드에 보내줍니다.</p>\n<p>예를 들어, 인스타 좋아요한 사진을 모아놓은 페이지에 들어간다면? <br/>\n해당 페이지에서 좋아요한 사진을 가져오는 api를 호출할 때, access token까지 같이 보내주면, 백앤드에서</p>\n<ol>\n<li>아! 이 token은 유효하구나</li>\n<li>user_id는 5구나</li>\n<li>user_id 5가 좋아요한 사진을 보내주자</li>\n</ol>\n<p>이런 과정을 거쳐서 사진 목록을 response 해주는 것입니다.</p>\n<h3 id=\"access-token을-local-storage에-저장하기\"><a href=\"#access-token%EC%9D%84-local-storage%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"access token을 local storage에 저장하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>access token을 local storage에 저장하기</h3>\n<p>access token을 어디에 저장하면 좋을까요? 저희는 한 번만 로그인하면 더 이상 안 해도 되도록 Local Storage에 저장하겠습니다.</p>\n<ul>\n<li><strong>Local Storage</strong>: 해당 도메인에 영구 저장하고 싶을 때</li>\n<li><strong>Session Storage</strong>: 해당 도메인의, 한 세션에서만 저장하고 싶을 때. 창을 닫으면 data가 날라간다.</li>\n<li><strong>Cookie</strong>: 해당 도메인에 날짜를 설정하고 그 때까지만 저장하고 싶을 때</li>\n</ul>\n<p>세 가지 차이점에 대해 좀 더 자세히 알고 싶으면 <a href=\"https://www.quora.com/What-is-the-difference-between-sessionstorage-localstorage-and-Cookies\">여기</a>를 참조해주세요.</p>\n<p>이제 로그인 후에 받아온 access token을 local storage에 저장해봅시다. <code class=\"language-text\">wtw-token</code>라는 키로 저장해보겠습니다. setItem 메서드를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8000/login/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1234'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wtw-token'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>개발자도구 -> Application tab -> Local Storage 에서 wtw-token 이름으로 된 data가 저장 됐으면 성공!\n<img src=\"/media/190507-local-storage.png\" width=\"500\" /></p>\n<h3 id=\"request-header에-access-token-보내기\"><a href=\"#request-header%EC%97%90-access-token-%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"request header에 access token 보내기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>request header에 access token 보내기</h3>\n<p>이제는 api를 호출할 때마다 access token을 보내보도록 하겠습니다.\n일단 백앤드에게 access token을 어디에 보내줘야 하냐고 물어봐야 합니다.</p>\n<p>보통은 request header의 <code class=\"language-text\">Authorization</code>에 넣어 보내줍니다.</p>\n<ol>\n<li>Local Storage에 <code class=\"language-text\">wtw-token</code> 존재하는지 확인</li>\n<li>있으면 request header의 <code class=\"language-text\">Authorization</code>에 추가하기</li>\n</ol>\n<p>get api를 예제로 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wtw-token'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:8000/likes/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> token<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>네! 이렇게 하면, 현재 로그인된 사람이 좋아요한 list를 가져올 것입니다! 끝!</p>","fields":{"slug":"/posts/jwt-authorization/","tagSlugs":null},"frontmatter":{"date":"2019-05-07","description":"로그인 기능을 구현하기 위해 access token을 Local Storage에 저장하고 request header에 보내는 방법을 알아봅니다.","tags":null,"title":"jwt으로 로그인 구현하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/jwt-authorization/"}}}