{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/express/","webpackCompilationHash":"cf8d7bcf770a08b246f1","result":{"data":{"markdownRemark":{"id":"2e0d7bca-b7d7-549a-a5f7-b308ee391b58","html":"<p>Express는 웹 서버와 API를 만들기 위한 강력하면서도 유연한 Javascript framework 이다.\nJavascript를 잘 쓰는 프론트앤드 개발자라고 해서 Node.js 를 잘 다룰줄 알아야하는 것은 아니지만,\n요즘에는 독립적으로 프론트앤드 서버를 띄우는 경우가 많으니, 간단하게라도 사용할줄 알면 좋다.</p>\n<h3 id=\"서버-띄우기\"><a href=\"#%EC%84%9C%EB%B2%84-%EB%9D%84%EC%9A%B0%EA%B8%B0\" aria-label=\"서버 띄우기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 띄우기</h3>\n<p>Express는 Node 모듈이라서 import를 해줘야 사용할 수 있다. 서버를 띄우기 위해서는 express 함수가 호출되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Node에서 모듈을 import하기 위해서는 require 키워드를 사용하면 된다. 참고로 express함수가 호출되면 Express의 instance인 애플리케이션 객체를 생성한다.\n이 애플리케이션(app변수)으로 서버를 시작하고, 설정하고, 응답을 받아 여러 일들을 처리할 수 있다.</p>\n<p>port를 지정해서 서버를 띄워보자. 서버가 제대로 실행되고, 응답받을 준비가 되면 2번째 인자인 콜백함수가 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">4001</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server is listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"appuse와-응답요청-메서드\"><a href=\"#appuse%EC%99%80-%EC%9D%91%EB%8B%B5%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"appuse와 응답요청 메서드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.use()와 응답/요청 메서드</h3>\n<p>app객체의 가장 기본 method는 <a href=\"http://expressjs.com/en/4x/api.html#app.use\">use</a>이다. 일단 가장 간단한 형태를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>app.use() 는 서버에 요청이 들어올떄마다 콜백함수를 실행한다. 만약 첫 번째 인자에 특정 path를 지정해주면, 해당 path로 요청할때만 콜백을 실행한다.</p>\n<p>콜백의 첫번째 인자인 요청 객체(req)에는 아래와 같은 메서드가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>header()</td>\n<td align=\"center\">요청 헤더의 속성을 지정하거나 추출</td>\n</tr>\n<tr>\n<td>accepts()</td>\n<td align=\"center\">요청 헤더의 Accept 속성확인</td>\n</tr>\n<tr>\n<td>param()</td>\n<td align=\"center\">요청 매개변수 추출</td>\n</tr>\n<tr>\n<td>is()</td>\n<td align=\"center\">요청 헤더의 Content-Type 속성확인</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//header 속성 보기</span>\n  <span class=\"token keyword\">const</span> agent <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//매개변수 추출</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>콜백의 두번째 인자인 응답 객체(res)에는 아래와 같은 메서드가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>send()</td>\n<td align=\"center\">매개변수 타입에 따라 적절한 형태로 응답</td>\n</tr>\n<tr>\n<td>json()</td>\n<td align=\"center\">json 형태로 응답</td>\n</tr>\n<tr>\n<td>redirect()</td>\n<td align=\"center\">웹 페이지 경로를 강제로 이동</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"미들웨어\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"미들웨어 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어</h3>\n<p>use() 메서드는 여러 번 사용할 수 있고, use에 인자로 넘기는 함수를 미들웨어라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'third'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드를 실행해보면 first, second, third 가 콘솔에 찍히고 end라는 응답을 보낸다. 이렇게 요청의 응답을 보내기 전까지\n중간에 여러 일들을 실행시킬 수 있다.\n미들웨어를 추가하려면 use의 매개변수에 넣으면 된다. 위의 코드에서는 콜백함수가 곧 미들웨어라고 할 수 있다.</p>\n<p>미들웨어 종류는 진짜 많고, 많은 개발자들이 개발해서 배포하고 있지만 그 중에 몇 가지만 보자.</p>\n<table>\n<thead>\n<tr>\n<th>middleware</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>logger</td>\n<td align=\"center\">웹 요청이 들어왔을 때 로그 출력</td>\n</tr>\n<tr>\n<td>bodyParser</td>\n<td align=\"center\">POST 요청 매개변수 추출</td>\n</tr>\n<tr>\n<td>cookieParser</td>\n<td align=\"center\">요청 쿠키를 추출</td>\n</tr>\n<tr>\n<td>router</td>\n<td align=\"center\">페이지 라우트를 수행</td>\n</tr>\n<tr>\n<td>static</td>\n<td align=\"center\">측정 폴더를 서버의 루트 폴더에 올림</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reference</h4>\n<ul>\n<li>codecademy</li>\n<li>Express 공식문서</li>\n<li>모던웹을 위한 Node.js 프로그래밍</li>\n</ul>","fields":{"slug":"/posts/express/","tagSlugs":null},"frontmatter":{"date":"2019-06-26T23:42:32.169Z","description":"짧막한 Express 이야기","tags":null,"title":"Express?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/express/"}}}