{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/array-from/","webpackCompilationHash":"947545fcb38bf3300c81","result":{"data":{"markdownRemark":{"id":"de3f21b8-4fa6-54b2-acdc-fca110b8484f","html":"<p>[].slice.call(arguments)와 Array.from()는\n유사배열이나 iterable object를 배열로 만들어주는 문법이다.</p>\n<hr>\n<h2 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>이 문법을 100% 이해하고 싶으면, 아래의 개념에 익숙해야 한다.</p>\n<ul>\n<li>arguments 키워드</li>\n<li>array-like (유사배열)</li>\n<li>iterable object</li>\n<li>call 메서드</li>\n<li>context 변환</li>\n</ul>\n<p>즉, 아직 모르고 사용해도 된다는 말.\n하지만, 사용하다가 문자게 생기면, 위의 키워드로 검색해보고 <code class=\"language-text\">아! 이래서 이렇구나</code> 깨닳으면 된다.</p>\n<h3 id=\"사용-예\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88\" aria-label=\"사용 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 예</h3>\n<p>공부하다 아래의 코드를 봤다.\n이제까지는 사용한 적 없는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  args<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">//이하 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음엔 arguments 를 copy 하려는 구문인가 생각했다.\n하지만 그런 경우라면 훨씬 쉬운 방법이 많았을 것이다.\n검색해보았더니 나름 qna와 블로그가 보인다.</p>\n<p>그 동안 arguments를 사용하면서 index로 접근하였으므로 당연히 배열이라고 생각했다.</p>\n<h4 id=\"arguments에-대한-개념-몇-가지\"><a href=\"#arguments%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B0%9C%EB%85%90-%EB%AA%87-%EA%B0%80%EC%A7%80\" aria-label=\"arguments에 대한 개념 몇 가지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>arguments에 대한 개념 몇 가지</h4>\n<ul>\n<li>arguments는 유사배열 객체이다. 함수 내에서만 사용할 수 있는 키워드 이며(=정의하지 않고 사용),\n인자로 넘어오는 값의 정보를 가지고 있다.</li>\n<li><code class=\"language-text\">유사배열</code>이란, 배열은 아니지만 length property를 가지며, 0부터 시작하는 property가 있어서 index로 접근할 수 있는 자료구조를 의미한다.\n<del>(그동안 length와 값 접근만 했으니, 딱히 배열이 아닐거라는 생각이 없었다)</del></li>\n<li>es6의 arrow function일 경우에는 사용할 수 없다.</li>\n<li>\n<p>arrow function이 아닐 경우에도, 굳이 유사 배열로 사용하여 관리를 어렵게 하지 말고, rest parameter 로 사용하는 것을 권장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// rest parameter 예제</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>theArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> theArgs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previous<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> previous <span class=\"token operator\">+</span> current<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h4 id=\"slicecallarguments\"><a href=\"#slicecallarguments\" aria-label=\"slicecallarguments permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[].slice.call(arguments)</h4>\n<p><code class=\"language-text\">결론: 객체인 arguments를 배열로 만들기 위한 구문</code></p>\n<p>[].slice까지는 함수를 반환한다. 모든 함수는 call 메서드를 갖고 있다.\ncall 메서드는 context 를 변환해서 함수(slice)를 호출해주는 것이라고 생각하면 된다.\n- slice 메서드가 호출될 때, slice 메서드는 call()의 인자인 object의 this를 바라본다.</p>\n<p>즉, 이 문법은,\n배열의 slice 메서드를 사용했으나 array-like인 arguments 객체를 바라보게 되어\n0 부터 시작하는 propery 값을 참조하여 새로운 배열을 만들어 낸다.</p>\n<h4 id=\"arrayfrom\"><a href=\"#arrayfrom\" aria-label=\"arrayfrom permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.from()</h4>\n<p>es6에 배열에 from() 메서드가 추가 되었다.\nArray.from()를 사용할 수 있다는 말은 ES6 환경이라는 말이고,\n그렇다면 rest paramater를 사용하면 되니까 arguments를 Array.from()로 감쌀 이유는 없다.</p>\n<p>유사배열이나 iterable object를 배열로 만들어주는 메서드이므로 다른 용도로 사용하면 된다.\n(iterator는 꽤나 깊은 스터디를 했기 때문에 블로그를 작성한줄 알았는데 없다.\n언젠간 추가 예정..)</p>\n<p>참고로 string도 유사배열이다. length property를 가지며, 0부터 index로 접근할 수 있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>객체 같은 경우, property 이름만 0, 1 등의 index처럼 사용하면 안되고,\nlegnth 프로퍼티가 꼭 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'yeri'</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/array-from/","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2019-11-11T05:46:32.169Z","description":null,"tags":["javascript"],"title":"[].slice.call(arguments)와 Array.from()"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/array-from/"}}}